import { Observable } from 'rxjs';
import { Category } from './../models/category';
import { Injectable } from '@angular/core';
import { addDoc, collection, collectionData, Firestore } from '@angular/fire/firestore';
import { ToastrService } from 'ngx-toastr';
import { AngularFirestore } from '@angular/fire/compat/firestore';


@Injectable({
  providedIn: 'root'
})
export class CategoriesService {

  userData!: Observable<any>;
  constructor(private firestore : Firestore, private toaster : ToastrService , private afs : AngularFirestore) { }


    addCategory(category: Category) {
      category.id = this.afs.createId();
      this.afs.collection('/categories').add(category);
      return this.toaster.success('Category added successfully');
    }

  getCategories(){
    return this.afs.collection('/categories').snapshotChanges();
  };

  deleteCategory(category : Category) {
     this.afs.collection('/categories').doc(category.id).delete();
     return this.toaster.success('Category deleted successfully');
    }
    
    updateCategory(category : Category) {
      this.afs.collection('/categories').doc(category.id).update(category);
    //   this.deleteCategory(category);
    // this.addCategory(category);     
  };
}

































// userData !: Observable<any>
// constructor(private firestore: Firestore) {
// }

// updateNewData: object | any = {};
// isTrue: boolean = false;

// ngOnInit(): void {
//   this.getData();
// }
// onSubmit(formData: any) {
//   const collectionInstance = collection(this.firestore, 'categories');
//   // let CategoryData = {
//   //   category: formData.value.category
//   // }
 
//   addDoc(collectionInstance, formData.value)
//     .then((docRef) => { console.log(docRef) })
//     .catch((error) => { console.log(error) })

// }

// getData() {
//   const collectionInstance = collection(this.firestore, 'categories');
//   collectionData(collectionInstance)
//     .subscribe((val) => {
//       console.log(val)
//     })

//   this.userData = collectionData(collectionInstance, { idField: 'id' });
// }


// updateData(id: string) {
//   const docInstance = doc(this.firestore, 'categories', id);
//   const newData = {
//     category: "Upadated Data"
//   }
//   updateDoc(docInstance, newData)
// }
// deleteData(id: string) {
//   const docInstance = doc(this.firestore, 'categories', id);
//   deleteDoc(docInstance)



//Componennt ********************************************************]
//Componennt ********************************************************]
//Componennt ********************************************************]
//Componennt ********************************************************]




import { Category } from './../models/category';
import { CategoriesService } from './../services/categories.service';

import { Component, OnInit } from '@angular/core';


@Component({
  selector: 'app-categories',
  templateUrl: './categories.component.html',
  styleUrls: ['./categories.component.css']
})
export class CategoriesComponent implements OnInit {
  constructor(private cs: CategoriesService, ) {
  }
  
  categoryList : Category[] = [];

  categoryObj : Category= {
    id: '',
    category: ''
  };

  category : string = ""
  id : string = ""
  
  
editMode : boolean = false;

  ngOnInit(): void {
    this.getData();
  }

  reset(){
    this.id='';
    this.category ='';
  }

  getData(){
    this.cs.getCategories().subscribe(res => {
     this.categoryList = res.map((e:any) => {
      const data = e.payload.doc.data();
      data.id = e.payload.doc.id;
      return data}) 
    },err=>{
      alert("Error occurred while fetching categories");
    })
  }
  
  addCategory(){
    this.categoryObj.category = this.category;
    this.categoryObj.id = '';
    this.cs.addCategory(this.categoryObj);
    this.reset();
  }

  editCategory(category : Category){
    this.category = category.category;
    this.id = category.id; 
    this.editMode = true
  }
  
  updateCategory(category : Category){
    this.categoryObj.category = this.category;
    this.categoryObj.id = category.id;
    this.cs.updateCategory(this.categoryObj);
    this.editMode = false;
    this.reset();
  }

  deleteCategory(category : Category){
    // if(window.confirm("Are you sure you want to delete this" + category.category +" category?" ))
    this.cs.deleteCategory(category)
  }
  
  
}


  // onSubmit(formData: any) {
  //   const categoryData : Category = {
  //       category : formData.value.category,
  //   }
  //   console.log(categoryData);
  //   this.categoriesService.saveData(categoryData);
  // }

 


  // getData() {
  //   const collectionInstance = collection(this.firestore, 'categories');
  //   collectionData(collectionInstance)
  //     .subscribe((val) => {
  //       console.log(val)
  //     })

  //   this.userData = collectionData(collectionInstance, { idField: 'id' });
  // }


  // updateData(id: string) {
  //   const docInstance = doc(this.firestore, 'categories', id);
  //   const newData = {
  //     category: "Upadated Data"
  //   }
  //   updateDoc(docInstance, newData)
  // }
  // deleteData(id: string) {
  //   const docInstance = doc(this.firestore, 'categories', id);
  //   deleteDoc(docInstance)
  // }